Aula 12 - Organização básica de um Código JS
sentenças de código, podem ou não terminar com ponto e vírgula
Blocos (símbolo das chaves) { }
dentro de blocos podem ter conjuntos de sentenças
// comentários
-> A própria IDE formata o documento Shift-alt-f
Aula 13 - Executando JavaScript
repl.it -> site para executar programas de várias linguagens diferentes (muito bom)
https://jsfiddle.net -> site para executar programas em JS
	->muito bacana, vale a pena verificar
no próprio f12 de uma página web
nessa página em questão, todas as bibliotecas instaladas nelas poderão ser utilizadas
Aula 14 - Comentários de Código
// Comentário de uma linha
/*
comentários de 
múltiplas linhas
*/
-> não necessita colocar comentários irrelevantes, não acrescentem nada no código
-> colocar comentários relevantes para o códigos
-> coloque nomes que todos conhecem e que sejam mais fáceis de intender o código
-> Código limpo
-> Comente tudo que sentir necessidade de comentar (No Curso)
Aulta 15 - Básico de Var, Let e Const
estrutura de dados -> lista, inteiro, arrey
	-> Regras pra dizer como um dado é organizado
algoritmo
	-> sentenças de códigos
	-> Manipula os dados
como criar variáveis e constantes:

Variável -> 	var (nome) 	=		(valor)
			   (atribuição) 
		let (nome)	=		(valor)
			   (atribuição) 
com o let, uma variável com o mesmo nome não pode ser redeclarado
constante ->	const (nome)	=		(valor)
			   (atribuição)
não pode atribuir um novo valor

quanto mais constantes tiver um programa, melhor será para manter ele
tudo aquilo que eunão tenho um motivo para mudar dentro do algoritmo coloque ele como constante
paradigma funcional-> utiliza muito constantes

AULA 16 - Tipagem fraca

como vai lidar com os tipos de dados
JS é uma liguagem de tipagem dinâmica

tipagem fraca quer dizer que as variáveis com tipos específicos podem mudar o seu tipo dependendo da situação
-> situações dificeis de detectar alguns tipos de erros
fica mais difícil de lidar com alguns bugs por conta da tipagem dinâmica

o fato dela ser de tipagem fraca não quer dizer que ela não possua um tipo, só quer dizer que esse tipo dela pode variar

AULA 17 - Tipos em JavaScrypt:Number
tipo numérico

const peso1 = 1.0
const peso2 =  number('2.0')

console.log(Number.isInteger(peso1))

no caso do JavaScrypt, peso1, 1.0, é um inteiro, em outras linguagens como Java, isso não seria verdade

Função toFixed(quantidade de casas decimais que eu quero que seja considerada)

Função toString() -> retorna uma string

toString(2) -> retorna um binário


Função Number(o que quer que seja convertido em number)

AULA 18 - Number: Alguns Cuidados


7/0 no JavaScrypt retorna o tipo Infinity

"10" / 2 -> Retorna 5, ou seja, o JavaScrypt analiza o conteúdo da string e retorna um number
console.log(0.1 + 0.7)// da uma loucura

I3E -> segue um padrão de operações imprecisas (exemplo o de cima)

console(10.toString())//nao da pra fazer isso

AULA 19 - Usando Math

exponenciação se utiliza a biblioteca math

const area = Math.PI * Math.pow(raio, 2)

Math é um Object

AULA 20 - Tipos em JavaScript: String

String em JavaScrypt pode ser identificada com 3 símbolos
"assim", 'assim' ou `assim`

console.log(escola.charAt(4))// vai me dar a letra que está no índice 0

Função charAt(índice)

console.log(escola.charCodeAt(3))//valor a tabela ask

Função charCodeAt(índice)

console.log(escola.indexOf('3'))// testa se tem aquele valor na string e retorna o índice

Função índexOf("Valor")

console.log(escola.substring(1))// Retorna a partir desse índice até o final

Função substring(índice)

console.log(escola.substring(0, 3))// do Índice 0 até o índice 2

Função substring(índiceÍnicio, ÍndiceFinalNãoIncluído)

console.log('Escola '.concat(escola).concat("!")) //contatenando valores literais

Funcão concat(String a ser concatenada ou adicionada)

também pode ser usado o +, no contexto de número ele vai somar e no contexto de strig ele vai concatenar

console.log(escola.replace(3, 'e'))

Função replace( valor que deseja ser substituido, valor que vai substituir )

console.log('Ana,Maria,Pedro'.split(','))// transformada em Array
console.log('Ana,Maria,Pedro'.split(/,/))// transformada em Array usando reject

função split(condição de separação da array)

AULA 21- Usando Template Strings

os templates se abrem com o símbolo da crase ` e podem ser 
separados com enters
e considera os espaços

console.log(`1 + 1 = ${1 + 1}`)
// depos do dollar e entre chaves ele vai interpretar

const up = texto => texto.toUpperCase()//criando a função up
        //parâmetro //retorna texto.toUpperCase()
console.log(`Ei...${up('cuidado')}!`)

expressões dentro de uma template string ${expressão aqui}

AULA 22 - Tipo em JavaScrypt : Boolean

Java -> Verdadeiros e Falso
JavaScrypt -> 
console.log('os verdadeiros...')
console.log(!!3)
console.log(!!-1)
//todos os numeros inteiros exceto o 0 são verdadeiros
console.log(!!' ')//basta ter um espaço que ja se torna verdadeiro
console.log(!![])
console.log(!!{})
console.log(!!Infinity)
console.log(!!(isAtivo = true))

console.log('os falsos...')
console.log(!!0)
console.log(!!'')
console.log(!!null)

console.log('pra finalizar...')
console.log(!!('' || null || 0 || ' '))
console.log(('' || null || 0 || '' || 123)) vai printar o primeiro verdadeiro
console.log(!!NaN)
console.log(!!undefined)
console.log(!!(isAtivo = false))

let nome = ''
console.log(nome || 'Desconhecido')
//ele imprime Desconhecido pois a string nome deu falso, pois não tem nada na string


nome = 'Caio'
console.log(nome || 'Desconhecido') // caso a primeira não esteja válido, use a segunda opção como informação padrão
// imprime Caio pois a string nome deu true, e não imprime desconhecido pois só imprime o primeiro true
! -> not
!! -> not not que retorna ao mesmo valor

AULA 23 - Tipos em JavaScrypt: Array

Array é uma forma de agrupar multiplos valores de uma forma linear, um elemento atrás do outro, como um vetor

apartir de um unico identificador e indexado

possuí índice

java - Arrey fixo, uma vez que você define uma array de 5 posições ele sempre terá 5 posições
JavaScrypt - Heterogênio (qualquer coisa), cresce e diminui de forma flexível

const valores = [7.7, 8.9, 6.3, 9.2] // declarado de forma literal []

console.log(valores.length)
Função length -> lé quantidade de índices

//Array pode ser misturado os tipos, mas não é uma boa prática

valores.push({id: 3}, false, null, 'teste')
Função push(elemento a ser adicionado em uma array)

console.log(valores.pop())//retorna o ultimo elemento do array e o array perde esse elemento
Função pop()

Em JavaScrypt um Array é do tipo Object

delete valores [0] // Deleta o elemento desse índice

Dinâmico, cresce e diminuit, indexada, heterogêneo

AULA 24 - Tipos em JavaScript: Object

Json - JavaScript Object Notation
objeto != Json
Json -> formato textual

como criar objetos de forma literal?

{} -> representa um objeto
[] -> representa uma lista/array

objeto em JS é uma coleção de chave e valores

um objeto pode ter outro objeto dentro dele

voce pode declarar atributos em JS de forma dinâmica

const prod1 = {}
prod1.nome = 'Celular Ultra Mega'//esse nome foi criado dinamicamente dentro desse objeto
prod1.preco = 4998.90
prod1['Desconto Legal'] = 0.40//Evitar atributos com espaço

const prod2 = {
    nome: 'Camisa Polo'
    preco: 79.90
}

Transformando em Json
'{ "nome": "Camisa Polo", "preco": 79.90 }'

json validator -> https://jsonlint.com/

json é um formato textual e objetos é uma coleção de chave e valor

AULA 25 - Entendendo o Null & Undefined

Atribuição por valor e Atribuição por referência

const a = {name: 'teste'}
const b = a -> o que de fato a variavel a armazena

o que a const a tem é um endereço no qual o objeto está localizado
quando se faz b = a -> b recebe o mesmo endereço no qual a aponta

ou seja b e a estão apontando para o mesmo endereçona memória

se mudar a, muda b, se mudar b, muda a

Atribuição pr referência :)

a = 3 //Não posso pois o a é uma constante

let c = 3// 3 é primitivo
let d = c

d++
se mudar d, não muda o c, se mudar c, não muda d
Atribuição por valor
quando se trabalha com tipos primitivos se faz uma cópia do valor

referência -> Objetos, funções
Valor -> Tipos primitivos

is not defined != Undefined

se você tem uma variável que aponta para um objeto e quer que ele não aponte mais para ninguém, você atribui nela o valor null

zerar variável do tipo referência = null

cuidado com variáveis que potencialmente podem estar nulas, sempre ter um valor padrão

AULA 26 - Quase tudo é função!!!

Função exerce papel central na linguagem

Object em JS é uma função!
Class em JS é uma função!

AULA 27 - Exemplos Básicos de Funções #01

Nenhum momento você deixa explicito que uma função retorna alguma coisa

função é uma receita de bolo
-> verbo, ação, ela executa um processo baseado na sentença de código
-> define um bloco {}

função recebe os dados de entrada, parâmetros de entrada
dentro da função será executado todo passo a passo

no final retorna algum valor

uma função pode não receber nenhum parâmetro ou pode não retornar nada, pode receber e retornar, ou não recebe e nao retorna tudo é possível

// Funcao sem retorno
function imprimirSoma(a, b){
    console.log(a + b)
}

imprimirSoma(2, 3)
imprimirSoma(2)// pode passar só um valor, o segundo valor será undefined, o resultado será um NaN
imprimirSoma(2, 10, 4, 5, 6, 7, 8)// pode passar mais de dois valores, a função vai considerar apenas os dois primeiros e vai ignorar o resto
imprimirSoma()// pode não colocar nenhum parâmetro, retorna um NaN

// Funcao com retorno
function soma(a, b = 0){
    return a + b
}

console.log(soma(2,3))
console.log(soma(2))

no JavaScript você pode colocar um valor padrão de parâmetro caso a função nao receba nada no lugar
ex: function soma(a, b = 0){} nesse caso, 0 será o valor padrão para b

AULA 28 - Exemplos Básicos de Funções #02

Função anônima, Função sem nome

uma constante pode receber uma função, você pode armazenar uma função em uma variável
// Armazenando uma funcao em uma variavel
const imprimirSoma = function (a, b){
    console.log(a+b)
}

imprimirSoma(2, 3)

maneiras mais reduzidas
a seta (=>) substitui o nome function
// Armazenando uma funcao arrow em uma variavel
const soma = (a, b) => {
    return a + b
}

console.log(soma(2, 3))

mais reduzida ainda, quando tem só uma linha de código

// retorno implícito
const subtracao = (a, b) => a - b//uma única linha, uma única sentença de código, o resultado dessa sentença de código é retornado
console.log(subtracao(5, 2))

const imprimir2 = a => console.log(a)// em caso de apênas um parâmetro, não precisa colocar o 'a' entre parenteses
imprimir2('Legal!!!')

AULA 29 - Declaração de variáveis com var #01

com a variável var fuca visível mesmo sendo declarada dentro de blocos diferentes, não sendo uma função

em outras linguagens, a variável seria visível apenas dentro desse bloco

funtion Teste(){
    var local = 123
}
teste ()
console.log(local)

no caso acima dará um erro, pois quando se define uma variável dentro de uma função, o escopo dessa variável é apenas dentro da função

quando se cria uma variável fora de uma função essa variável é global, ela está disponível dentro do objeto window

por que deve fugir do escopo global?
-> por que quando você cria uma variável e ela vai pro escopo global
qualquer sobreescrita dessa variável pode gerar um problema muito sério

var só tem dois escopos possíveis, ou global ou no escopo de função

AULA 30 - Declaração de Variáveis com Var #02

fuja do escopo global!!
var numero = 1
{
    var numero = 2
    console.log('dentro =', numero)
}
console.log('fora =', numero)
nesse caso o var foi declarado duas vezes para a mesma variável sem nenhum problema
logo nesse caso o número 2 é impresso duas vezes

AULA 31 - Declaração de Variáveis com Let

o Let tem um escopo por blocos

Variáveis definidas com a palavra reservada var tem escopo global e função

Variáveis definidas com a palavra reservada let tem escopo global, função e de blocos.//isso faz toda diferença

AULA 32 - Usando Var em Loop #01

usando for como looping, demonstrando o problema de variável global

for(var i = 0; i< 10; i++){
    console.log(i)
}
console.log('i = ', i)

ele imprime o i, mesmo ele tendo sido declarado no for, e o i tem o valor que fez parar a condição

AULA 33 - Usando Let em Loop #01

for (let i = 0; i < 10; i++) {
    console.log(i)
}

console.log('i = ', i)

nessa situação como o i foi declarado com let dentro do escopo do loopint
ela nao se torna visível fora do looping, gerando um erro

AULA 34 - Usando Var em Loop #02
Var não tem escopo de função

const funcs = []

for (var i = 0; i < 10; i++){
    funcs.push(function(){
        console.log (i)
    })
}

funcs[2]()
funcs[8]()
// vai printar somente 10

























